---
# Copyright (c) 2025 Joshua Hendricks Cole (DBA: Corporation of Light). All Rights Reserved. PATENT PENDING.
#
# QuLab AI Secrets - Sensitive Configuration
# IMPORTANT: This file contains placeholders. Replace with actual secrets in production.
# DO NOT commit actual secrets to version control.

apiVersion: v1
kind: Secret
metadata:
  name: qulab-secrets
  namespace: qulab
  labels:
    app: qulab-api
type: Opaque
stringData:
  # JWT Secret Key (base64 encoded in actual deployment)
  # Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
  jwt-secret-key: "REPLACE_WITH_ACTUAL_SECRET_KEY_DO_NOT_USE_THIS_PLACEHOLDER"

  # API Key Salt (for generating API keys)
  api-key-salt: "REPLACE_WITH_ACTUAL_SALT_DO_NOT_USE_THIS_PLACEHOLDER"

  # Database credentials (if needed)
  # database-username: "qulab_user"
  # database-password: "REPLACE_WITH_ACTUAL_DB_PASSWORD"
  # database-url: "postgresql://qulab_user:PASSWORD@qulab-postgres:5432/qulab"

  # Redis password (if needed)
  # redis-password: "REPLACE_WITH_ACTUAL_REDIS_PASSWORD"

  # AWS credentials (if needed)
  # aws-access-key-id: "REPLACE_WITH_ACTUAL_AWS_KEY"
  # aws-secret-access-key: "REPLACE_WITH_ACTUAL_AWS_SECRET"

  # Monitoring credentials
  # prometheus-password: "REPLACE_WITH_ACTUAL_PROMETHEUS_PASSWORD"
  # grafana-admin-password: "REPLACE_WITH_ACTUAL_GRAFANA_PASSWORD"

---
# External Secrets Operator (ESO) - Alternative for cloud secrets
# Syncs secrets from AWS Secrets Manager, Google Secret Manager, Azure Key Vault, etc.
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: qulab-secretstore
  namespace: qulab
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: qulab-api

---
# Example ExternalSecret (syncs from AWS Secrets Manager)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: qulab-external-secrets
  namespace: qulab
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: qulab-secretstore
    kind: SecretStore

  target:
    name: qulab-secrets-synced
    creationPolicy: Owner

  data:
  - secretKey: jwt-secret-key
    remoteRef:
      key: qulab/production/jwt-secret

  - secretKey: api-key-salt
    remoteRef:
      key: qulab/production/api-key-salt

---
# Sealed Secrets (alternative for GitOps workflows)
# Allows committing encrypted secrets to Git
# Requires sealed-secrets controller: https://github.com/bitnami-labs/sealed-secrets
#
# To create a sealed secret:
# 1. Create normal secret: kubectl create secret generic qulab-secrets --dry-run=client -o yaml > secret.yaml
# 2. Seal it: kubeseal -f secret.yaml -w sealed-secret.yaml
# 3. Commit sealed-secret.yaml to Git (encrypted)
#
# Example SealedSecret (this is just a template):
# apiVersion: bitnami.com/v1alpha1
# kind: SealedSecret
# metadata:
#   name: qulab-secrets-sealed
#   namespace: qulab
# spec:
#   encryptedData:
#     jwt-secret-key: AgB... (encrypted value)
#     api-key-salt: AgC... (encrypted value)

---
# Image Pull Secret (for private container registries)
apiVersion: v1
kind: Secret
metadata:
  name: qulab-registry-secret
  namespace: qulab
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "ghcr.io": {
          "username": "REPLACE_WITH_GITHUB_USERNAME",
          "password": "REPLACE_WITH_GITHUB_TOKEN",
          "email": "joshua@corporationoflight.com",
          "auth": "REPLACE_WITH_BASE64_USERNAME_PASSWORD"
        }
      }
    }

---
# TLS Secret (if not using cert-manager)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: qulab-tls-manual
#   namespace: qulab
# type: kubernetes.io/tls
# stringData:
#   tls.crt: |
#     -----BEGIN CERTIFICATE-----
#     ... (certificate content)
#     -----END CERTIFICATE-----
#   tls.key: |
#     -----BEGIN PRIVATE KEY-----
#     ... (private key content)
#     -----END PRIVATE KEY-----
